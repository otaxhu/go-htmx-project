// Code generated by mockery v2.23.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/otaxhu/go-htmx-project/internal/models"
	mock "github.com/stretchr/testify/mock"

	wrappers "github.com/otaxhu/go-htmx-project/internal/wrappers"
)

// ProductsRepository is an autogenerated mock type for the ProductsRepository type
type ProductsRepository struct {
	mock.Mock
}

// DeleteProduct provides a mock function with given fields: ctx, id
func (_m *ProductsRepository) DeleteProduct(ctx context.Context, id string) (wrappers.Tx, error) {
	ret := _m.Called(ctx, id)

	var r0 wrappers.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (wrappers.Tx, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) wrappers.Tx); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wrappers.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductById provides a mock function with given fields: ctx, id
func (_m *ProductsRepository) GetProductById(ctx context.Context, id string) (models.Product, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Product); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields: ctx, offset, limit
func (_m *ProductsRepository) GetProducts(ctx context.Context, offset int, limit int) ([]models.Product, error) {
	ret := _m.Called(ctx, offset, limit)

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]models.Product, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []models.Product); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertProduct provides a mock function with given fields: ctx, product
func (_m *ProductsRepository) InsertProduct(ctx context.Context, product models.Product) (wrappers.Tx, string, error) {
	ret := _m.Called(ctx, product)

	var r0 wrappers.Tx
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Product) (wrappers.Tx, string, error)); ok {
		return rf(ctx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Product) wrappers.Tx); ok {
		r0 = rf(ctx, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wrappers.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Product) string); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.Product) error); ok {
		r2 = rf(ctx, product)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SearchProducts provides a mock function with given fields: ctx, term
func (_m *ProductsRepository) SearchProducts(ctx context.Context, term string) ([]models.Product, error) {
	ret := _m.Called(ctx, term)

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Product, error)); ok {
		return rf(ctx, term)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Product); ok {
		r0 = rf(ctx, term)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, term)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: ctx, product
func (_m *ProductsRepository) UpdateProduct(ctx context.Context, product models.Product) (wrappers.Tx, error) {
	ret := _m.Called(ctx, product)

	var r0 wrappers.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Product) (wrappers.Tx, error)); ok {
		return rf(ctx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Product) wrappers.Tx); ok {
		r0 = rf(ctx, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wrappers.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Product) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductsRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductsRepository creates a new instance of ProductsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductsRepository(t mockConstructorTestingTNewProductsRepository) *ProductsRepository {
	mock := &ProductsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
